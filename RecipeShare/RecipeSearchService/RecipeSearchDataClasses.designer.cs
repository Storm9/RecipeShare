#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RecipeSearchService
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Recipes")]
	public partial class RecipeSearchDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertIngredient(Ingredient instance);
    partial void UpdateIngredient(Ingredient instance);
    partial void DeleteIngredient(Ingredient instance);
    partial void InsertIngredients(Ingredients instance);
    partial void UpdateIngredients(Ingredients instance);
    partial void DeleteIngredients(Ingredients instance);
    partial void InsertMeasure(Measure instance);
    partial void UpdateMeasure(Measure instance);
    partial void DeleteMeasure(Measure instance);
    partial void InsertRecipe(Recipe instance);
    partial void UpdateRecipe(Recipe instance);
    partial void DeleteRecipe(Recipe instance);
    partial void InsertReview(Review instance);
    partial void UpdateReview(Review instance);
    partial void DeleteReview(Review instance);
    #endregion
		
		public RecipeSearchDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RecipeContext"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RecipeSearchDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RecipeSearchDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RecipeSearchDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RecipeSearchDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<Ingredient> Ingredients
		{
			get
			{
				return this.GetTable<Ingredient>();
			}
		}
		
		public System.Data.Linq.Table<Ingredients> Ingredients1
		{
			get
			{
				return this.GetTable<Ingredients>();
			}
		}
		
		public System.Data.Linq.Table<Measure> Measures
		{
			get
			{
				return this.GetTable<Measure>();
			}
		}
		
		public System.Data.Linq.Table<Recipe> Recipes
		{
			get
			{
				return this.GetTable<Recipe>();
			}
		}
		
		public System.Data.Linq.Table<Review> Reviews
		{
			get
			{
				return this.GetTable<Review>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Image")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageID;
		
		private int _RecipeID;
		
		private string _URI;
		
		private EntityRef<Recipe> _Recipe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnRecipeIDChanging(int value);
    partial void OnRecipeIDChanged();
    partial void OnURIChanging(string value);
    partial void OnURIChanged();
    #endregion
		
		public Image()
		{
			this._Recipe = default(EntityRef<Recipe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipeID", DbType="Int NOT NULL")]
		public int RecipeID
		{
			get
			{
				return this._RecipeID;
			}
			set
			{
				if ((this._RecipeID != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipeIDChanging(value);
					this.SendPropertyChanging();
					this._RecipeID = value;
					this.SendPropertyChanged("RecipeID");
					this.OnRecipeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URI", DbType="NVarChar(MAX)")]
		public string URI
		{
			get
			{
				return this._URI;
			}
			set
			{
				if ((this._URI != value))
				{
					this.OnURIChanging(value);
					this.SendPropertyChanging();
					this._URI = value;
					this.SendPropertyChanged("URI");
					this.OnURIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Image", Storage="_Recipe", ThisKey="RecipeID", OtherKey="RecipeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.Images.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.Images.Add(this);
						this._RecipeID = value.RecipeID;
					}
					else
					{
						this._RecipeID = default(int);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ingredient")]
	public partial class Ingredient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IngredientID;
		
		private string _Name;
		
		private EntitySet<Ingredients> _Ingredients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIngredientIDChanging(int value);
    partial void OnIngredientIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Ingredient()
		{
			this._Ingredients = new EntitySet<Ingredients>(new Action<Ingredients>(this.attach_Ingredients), new Action<Ingredients>(this.detach_Ingredients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IngredientID
		{
			get
			{
				return this._IngredientID;
			}
			set
			{
				if ((this._IngredientID != value))
				{
					this.OnIngredientIDChanging(value);
					this.SendPropertyChanging();
					this._IngredientID = value;
					this.SendPropertyChanged("IngredientID");
					this.OnIngredientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_Ingredient1", Storage="_Ingredients", ThisKey="IngredientID", OtherKey="IngredientID")]
		public EntitySet<Ingredients> Ingredients
		{
			get
			{
				return this._Ingredients;
			}
			set
			{
				this._Ingredients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ingredients(Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = this;
		}
		
		private void detach_Ingredients(Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Ingredient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ingredients")]
	public partial class Ingredients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IngredientsID;
		
		private int _RecipeID;
		
		private System.Nullable<double> _Quantity;
		
		private System.Nullable<int> _MeasureID;
		
		private int _IngredientID;
		
		private string _Description;
		
		private EntityRef<Ingredient> _Ingredient;
		
		private EntityRef<Measure> _Measure;
		
		private EntityRef<Recipe> _Recipe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIngredientsIDChanging(int value);
    partial void OnIngredientsIDChanged();
    partial void OnRecipeIDChanging(int value);
    partial void OnRecipeIDChanged();
    partial void OnQuantityChanging(System.Nullable<double> value);
    partial void OnQuantityChanged();
    partial void OnMeasureIDChanging(System.Nullable<int> value);
    partial void OnMeasureIDChanged();
    partial void OnIngredientIDChanging(int value);
    partial void OnIngredientIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Ingredients()
		{
			this._Ingredient = default(EntityRef<Ingredient>);
			this._Measure = default(EntityRef<Measure>);
			this._Recipe = default(EntityRef<Recipe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IngredientsID
		{
			get
			{
				return this._IngredientsID;
			}
			set
			{
				if ((this._IngredientsID != value))
				{
					this.OnIngredientsIDChanging(value);
					this.SendPropertyChanging();
					this._IngredientsID = value;
					this.SendPropertyChanged("IngredientsID");
					this.OnIngredientsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipeID", DbType="Int NOT NULL")]
		public int RecipeID
		{
			get
			{
				return this._RecipeID;
			}
			set
			{
				if ((this._RecipeID != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipeIDChanging(value);
					this.SendPropertyChanging();
					this._RecipeID = value;
					this.SendPropertyChanged("RecipeID");
					this.OnRecipeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Float")]
		public System.Nullable<double> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureID", DbType="Int")]
		public System.Nullable<int> MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					if (this._Measure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IngredientID", DbType="Int NOT NULL")]
		public int IngredientID
		{
			get
			{
				return this._IngredientID;
			}
			set
			{
				if ((this._IngredientID != value))
				{
					if (this._Ingredient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIngredientIDChanging(value);
					this.SendPropertyChanging();
					this._IngredientID = value;
					this.SendPropertyChanged("IngredientID");
					this.OnIngredientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ingredient_Ingredient1", Storage="_Ingredient", ThisKey="IngredientID", OtherKey="IngredientID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Ingredient Ingredient
		{
			get
			{
				return this._Ingredient.Entity;
			}
			set
			{
				Ingredient previousValue = this._Ingredient.Entity;
				if (((previousValue != value) 
							|| (this._Ingredient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ingredient.Entity = null;
						previousValue.Ingredients.Remove(this);
					}
					this._Ingredient.Entity = value;
					if ((value != null))
					{
						value.Ingredients.Add(this);
						this._IngredientID = value.IngredientID;
					}
					else
					{
						this._IngredientID = default(int);
					}
					this.SendPropertyChanged("Ingredient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Measure_Ingredient1", Storage="_Measure", ThisKey="MeasureID", OtherKey="MeasureID", IsForeignKey=true)]
		public Measure Measure
		{
			get
			{
				return this._Measure.Entity;
			}
			set
			{
				Measure previousValue = this._Measure.Entity;
				if (((previousValue != value) 
							|| (this._Measure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measure.Entity = null;
						previousValue.Ingredients.Remove(this);
					}
					this._Measure.Entity = value;
					if ((value != null))
					{
						value.Ingredients.Add(this);
						this._MeasureID = value.MeasureID;
					}
					else
					{
						this._MeasureID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measure");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Ingredient1", Storage="_Recipe", ThisKey="RecipeID", OtherKey="RecipeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.Ingredients.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.Ingredients.Add(this);
						this._RecipeID = value.RecipeID;
					}
					else
					{
						this._RecipeID = default(int);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Measure")]
	public partial class Measure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MeasureID;
		
		private string _Name;
		
		private EntitySet<Ingredients> _Ingredients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeasureIDChanging(int value);
    partial void OnMeasureIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Measure()
		{
			this._Ingredients = new EntitySet<Ingredients>(new Action<Ingredients>(this.attach_Ingredients), new Action<Ingredients>(this.detach_Ingredients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasureID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MeasureID
		{
			get
			{
				return this._MeasureID;
			}
			set
			{
				if ((this._MeasureID != value))
				{
					this.OnMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._MeasureID = value;
					this.SendPropertyChanged("MeasureID");
					this.OnMeasureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Measure_Ingredient1", Storage="_Ingredients", ThisKey="MeasureID", OtherKey="MeasureID")]
		public EntitySet<Ingredients> Ingredients
		{
			get
			{
				return this._Ingredients;
			}
			set
			{
				this._Ingredients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ingredients(Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Measure = this;
		}
		
		private void detach_Ingredients(Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Measure = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recipe")]
	public partial class Recipe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RecipeID;
		
		private int _ParentID;
		
		private int _Rating;
		
		private int _Votes;
		
		private string _Name;
		
		private string _Instructions;
		
		private EntitySet<Image> _Images;
		
		private EntitySet<Ingredients> _Ingredients;
		
		private EntitySet<Review> _Reviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecipeIDChanging(int value);
    partial void OnRecipeIDChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnVotesChanging(int value);
    partial void OnVotesChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInstructionsChanging(string value);
    partial void OnInstructionsChanged();
    #endregion
		
		public Recipe()
		{
			this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
			this._Ingredients = new EntitySet<Ingredients>(new Action<Ingredients>(this.attach_Ingredients), new Action<Ingredients>(this.detach_Ingredients));
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecipeID
		{
			get
			{
				return this._RecipeID;
			}
			set
			{
				if ((this._RecipeID != value))
				{
					this.OnRecipeIDChanging(value);
					this.SendPropertyChanging();
					this._RecipeID = value;
					this.SendPropertyChanged("RecipeID");
					this.OnRecipeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Votes", DbType="Int NOT NULL")]
		public int Votes
		{
			get
			{
				return this._Votes;
			}
			set
			{
				if ((this._Votes != value))
				{
					this.OnVotesChanging(value);
					this.SendPropertyChanging();
					this._Votes = value;
					this.SendPropertyChanged("Votes");
					this.OnVotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Instructions", DbType="NVarChar(MAX)")]
		public string Instructions
		{
			get
			{
				return this._Instructions;
			}
			set
			{
				if ((this._Instructions != value))
				{
					this.OnInstructionsChanging(value);
					this.SendPropertyChanging();
					this._Instructions = value;
					this.SendPropertyChanged("Instructions");
					this.OnInstructionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Image", Storage="_Images", ThisKey="RecipeID", OtherKey="RecipeID")]
		public EntitySet<Image> Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				this._Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Ingredient1", Storage="_Ingredients", ThisKey="RecipeID", OtherKey="RecipeID")]
		public EntitySet<Ingredients> Ingredients
		{
			get
			{
				return this._Ingredients;
			}
			set
			{
				this._Ingredients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Review", Storage="_Reviews", ThisKey="RecipeID", OtherKey="RecipeID")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
		
		private void attach_Ingredients(Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_Ingredients(Ingredients entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Review")]
	public partial class Review : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReviewID;
		
		private int _RecipeID;
		
		private string _Name;
		
		private string _Entry;
		
		private EntityRef<Recipe> _Recipe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReviewIDChanging(int value);
    partial void OnReviewIDChanged();
    partial void OnRecipeIDChanging(int value);
    partial void OnRecipeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEntryChanging(string value);
    partial void OnEntryChanged();
    #endregion
		
		public Review()
		{
			this._Recipe = default(EntityRef<Recipe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReviewID
		{
			get
			{
				return this._ReviewID;
			}
			set
			{
				if ((this._ReviewID != value))
				{
					this.OnReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ReviewID = value;
					this.SendPropertyChanged("ReviewID");
					this.OnReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecipeID", DbType="Int NOT NULL")]
		public int RecipeID
		{
			get
			{
				return this._RecipeID;
			}
			set
			{
				if ((this._RecipeID != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipeIDChanging(value);
					this.SendPropertyChanging();
					this._RecipeID = value;
					this.SendPropertyChanged("RecipeID");
					this.OnRecipeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Entry", DbType="NVarChar(MAX)")]
		public string Entry
		{
			get
			{
				return this._Entry;
			}
			set
			{
				if ((this._Entry != value))
				{
					this.OnEntryChanging(value);
					this.SendPropertyChanging();
					this._Entry = value;
					this.SendPropertyChanged("Entry");
					this.OnEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Review", Storage="_Recipe", ThisKey="RecipeID", OtherKey="RecipeID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._RecipeID = value.RecipeID;
					}
					else
					{
						this._RecipeID = default(int);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
